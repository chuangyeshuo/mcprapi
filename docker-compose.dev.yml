version: '3.8'

services:
  # MySQL数据库（开发环境）
  mysql-dev:
    image: mysql:8.0
    container_name: mcprapi-mysql-dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-devpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-api_auth_dev}
      MYSQL_USER: ${MYSQL_USER:-mcprapi}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-devpassword}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    volumes:
      - mysql-dev-data:/var/lib/mysql
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${MYSQL_PORT:-3307}:3306"
    networks:
      - mcprapi-dev-network
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-devpassword}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis缓存（开发环境）
  redis-dev:
    image: redis:7.0-alpine
    container_name: mcprapi-redis-dev
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-devpassword}
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-dev-data:/data
    ports:
      - "${REDIS_PORT:-6380}:6379"
    networks:
      - mcprapi-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-devpassword}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # 后端API服务（开发环境 - 热重载）
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: mcprapi-backend-dev
    restart: unless-stopped
    environment:
      # 数据库配置
      MYSQL_HOST: mysql-dev
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ${MYSQL_DATABASE:-api_auth_dev}
      MYSQL_USER: ${MYSQL_USER:-mcprapi}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-devpassword}
      
      # Redis配置
      REDIS_HOST: redis-dev
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-devpassword}
      
      # 应用配置
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key}
      APP_ENV: development
      APP_PORT: 8080
      LOG_LEVEL: debug
      
      # 开发配置
      GIN_MODE: debug
      HOT_RELOAD: true
    ports:
      - "${BACKEND_PORT:-8081}:8080"
    depends_on:
      mysql-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    networks:
      - mcprapi-dev-network
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    working_dir: /app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # 前端Web服务（开发环境 - 热重载）
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: mcprapi-frontend-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - VUE_APP_API_BASE_URL=http://localhost:8081
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "${FRONTEND_PORT:-8082}:8082"
    depends_on:
      backend-dev:
        condition: service_healthy
    networks:
      - mcprapi-dev-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    stdin_open: true
    tty: true

  # 数据库管理工具（可选）
  adminer:
    image: adminer:4.8.1
    container_name: mcprapi-adminer
    restart: unless-stopped
    ports:
      - "8083:8080"
    networks:
      - mcprapi-dev-network
    depends_on:
      - mysql-dev

  # Redis管理工具（可选）
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: mcprapi-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis-dev:6379:0:${REDIS_PASSWORD:-devpassword}
    ports:
      - "8084:8081"
    networks:
      - mcprapi-dev-network
    depends_on:
      - redis-dev

networks:
  mcprapi-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  mysql-dev-data:
    driver: local
  redis-dev-data:
    driver: local